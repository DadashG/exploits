import sqlite3, argparse, os, base64, urllib.parse

def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    return conn

def create_db(conn):
    createContentTable="""CREATE TABLE IF NOT EXISTS content (
            id integer PRIMARY KEY,
            location text NOT NULL,
            content blob);"""
    createCredsTable="""CREATE TABLE IF NOT EXISTS creds (
            id integer PRIAMRY KEY,
            username text NOT NULL,
            password text NOT NULL,
            cookie text NOT NULL);"""
    try:
        c = conn.cursor()
        c.execute(createContentTable)
        c.execute(createCredsTable)
    except Error as e:
        print(e)

def get_content(conn, location):
    cmd = "SELECT content FROM content where location=\"{}\";".format(base64.b64encode(location.encode('UTF-8')).decode())
    try:
        c = conn.cursor()
        result = c.execute(cmd)
        return urllib.parse.unquote(base64.b64decode(result.fetchall()[0][0]).decode())
    except Error as e:
        print(e)

loclist = []

def get_locations(conn):
    cmd = "SELECT location FROM content"
    try:
        c = conn.cursor()
        result = c.execute(cmd)
        for i in result:
            loclist.append(base64.b64decode(i[0]).decode())
        return loclist
    except Error as e:
        print(e)

def get_creds(conn):
    cmd = "SELECT * from creds"
    try:
        c = conn.cursor()
        result = c.execute(cmd)
        return result.fetchall()
    except Error as e:
        print(e)

def insert_creds(uname,passwd,cookie):
    db_file=r"sqlite.db"
    conn = sqlite3.connect(db_file)
    cmd = "INSERT INTO creds (username, password, cookie) VALUES (\"{}\",\"{}\",\"{}\")".format(uname,passwd,cookie)
    try:
        c = conn.cursor()
        result = c.execute(cmd)
        conn.commit()
        ins = c.execute("SELECT last_insert_rowid();").fetchone()[0]
        print("Credential insert successfull, ID: "+str(ins))
        return ins
    except Error as e:
        print(e)

def insert_content(loc,cont):
    db_file=r"sqlite.db"
    conn = sqlite3.connect(db_file)
    cmd = "INSERT INTO content (location,content) VALUES (\"{}\",\"{}\");".format(loc,cont)
    try:
        c = conn.cursor()
        result = c.execute(cmd)
        conn.commit()
        ins = c.execute("SELECT last_insert_rowid();").fetchone()[0]
        print("Inser successful, ID: "+str(ins))
        return ins
    except Error as e:
        print(e)


if __name__ == "__main__":
    database=r"sqlite.db"
    conn = create_connection(database)
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--create','-c', help='Create Database', action='store_true')
    group.add_argument('--insert','-i', help='Insert Content', action='store_true')
    group.add_argument('--get','-g', help='Get Content', action='store_true')
    group.add_argument('--getLocations','-l', help='Get all Locations', action='store_true')
    group.add_argument('--getCreds','-d', help='Dump all credentials', action='store_true')
    parser.add_argument('--location','-L')
    parser.add_argument('--content','-C')
    args = parser.parse_args()
    

    if (args.create):
        print("[+] Creating Database")
        create_db(conn)
    elif (args.insert):
        if(args.location is None and args.content is None):
            parser.error("--insert requires --location, --content.")
        else:
            print("[+] Inserting Data")
            insert_content(args.location, args.content)
            conn.commit()
    elif (args.get):
        if(args.location is None):
            parser.error("--get requires --location, --content.")
        else:
            print("[+] Getting Content")
            print(get_content(conn,args.location))
    if (args.getLocations):
        print("[+] Getting All Locations")
        print(get_locations(conn))
    elif (args.getCreds):
        print("[+] Dumping all credentials")
        print(get_creds(conn))
